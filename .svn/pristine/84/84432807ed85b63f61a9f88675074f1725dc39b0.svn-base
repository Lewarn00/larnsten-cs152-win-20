;; _total-score_                    91 / 100

;; Week 3 assignment

;; === automated correctness ===

;; remove_max			7 / 7
  [1 / 1] check max value {9,5,7,6,2,2,3}
  [1 / 1] check max value {6,3,2,2,3,1,7,8}
  [1 / 1] check array modification {9,5,7,6,2,2,3}
  [1 / 1] check array modification {1,2,3,4,15,6,7,8,9}
  [1 / 1] check array modification {1}
  [1 / 1] check array modification {1,2,3,14,14,6,7,8}
  [1 / 1] check array modification {11,2,3,4,5,6,7,11}

;; init_board			0 / 5
  [0 / 5] test on empty board
  - You did not correctly modify the board.
    Result ---        | Expected ---
      0 1 2 3 4 5 6 7 |   0 1 2 3 4 5 6 7
    0 * b * b * b * b | 0 * b * b * b * b
    1 b * b * b * b * | 1 b * b * b * b *
    2 * b * b * b * b | 2 * b * b * b * b
    3 * * * * * * * * | 3 * * * * * * * *
    4 * * * * * * * * | 4 * * * * * * * *
    5 * w * w * w * w | 5 w * w * w * w *
    6 w * w * w * w * | 6 * w * w * w * w
    7 * w * w * w * w | 7 w * w * w * w *
  --- end of test case

;; place_piece			7 / 8
  [2 / 2] board: init_board, row: 0, col: 0
  [0 / 2] board: init_board, player: b, row: 7, col: 7
  - You did not correctly modify the board.
    Result ---        | Expected ---
      0 1 2 3 4 5 6 7 |   0 1 2 3 4 5 6 7
    0 * b * b * b * b | 0 * b * b * b * b
    1 b * b * b * b * | 1 b * b * b * b *
    2 * b * b * b * b | 2 * b * b * b * b
    3 * * * * * * * * | 3 * * * * * * * *
    4 * * * * * * * * | 4 * * * * * * * *
    5 w * w * w * w * | 5 w * w * w * w *
    6 * w * w * w * w | 6 * w * w * w * w
    7 w * w * w * w * | 7 w * w * w * w b
  --- end of test case
  [2 / 2] board: init_board, row: 3, col: 6
  [1 / 1] board: init_board, row: 2, col: 3
  [1 / 1] board: init_board, row: 9, col: 5

;; area_and_perimeter			6 / 6
  [3 / 3] height: 3.500000, length: 7.900000, check area
  [3 / 3] height: 3.500000, length: 7.900000, check perimeter

;; remove_max			4 / 4
  [2 / 2] check update of length parameter {1,2,3,4,15,6,7,8,9}
  [2 / 2] check update of length parameter {1,2,3,14,5,14,7,8}

;; player_won			9 / 10
  [2 / 2] 'w' wins because 'b' is out of pieces
  [2 / 2] 'b' wins because 'w' is out of pieces
  [2 / 2] w does not win
  [2 / 2] b does not win
  [1 / 1] b has no valid moves left
  [0 / 1] w has no valid moves left
  - check if player 'b' won, result 0, expected 1
  - Test case board is shown below----
      0 1 2 3 4 5 6 7
    0 * * * * * * * *
    1 * * * * * * * *
    2 b * w * * * b *
    3 * b * * * b * *
    4 * * * * b * * *
    5 * * * b * * * *
    6 b * * * b * * *
    7 * * * * * * * *
 --- end of test case

;; do_move			25 / 25
  [1 / 1] start row out of range - check return value
  [1 / 1] end col out of range - check return value
  [1 / 1] end spot already occupied - check return value
  [1 / 1] Trying to hop but no item beneath - check return value
  [1 / 1] Trying to hop but wrong colored item beneath - check return value
  [1 / 1] moving in the wrong direction - check return value
  [1 / 1] end row out of range - check board modification
  [1 / 1] starting spot occupied by the wrong color - check board modification
  [1 / 1] moving sideways - check board modification
  [2 / 2] king able to in opposite direction
  [2 / 2] w moves to edge of board
  [2 / 2] w moves within middle of board
  [2 / 2] b moves within middle of board
  [2 / 2] w captures opponent, moves to space in middle of board
  [2 / 2] w captures opponent, moves to edge and becomes king
  [2 / 2] b captures opponent, moves to space in middle of board
  [2 / 2] b captures opponent, moves to edge

;; computer_move			7 / 10
  [2 / 2] initial board
  [1 / 2] random board with several available moves
  player=w, board ---
      0 1 2 3 4 5 6 7
    0 * b * b * * * *
    1 * * b * b * * *
    2 * * * w * b * *
    3 * * * * * * w *
    4 * b * b * w * *
    5 * * w * b * w *
    6 * w * * * w * *
    7 w * w * w * * *
  - [ok] you indicated a valid computer move
  - your return value was wrong
 --- end of test case
  [2 / 2] random board with several available moves
  [1 / 2] random board with one available move
  player=w, board ---
      0 1 2 3 4 5 6 7
    0 * * * * * * * *
    1 * * * * * * * *
    2 * b * b * b * *
    3 * * b * b * b *
    4 * b * w * b * b
    5 * * w * w * b *
    6 * * * w * w * w
    7 * * * * * * w *
  - [ok] you indicated a valid computer move
  - your return value was wrong
 --- end of test case
  [1 / 2] random board with one available move
  player=b, board ---
      0 1 2 3 4 5 6 7
    0 * b * * * * * *
    1 b * w * * * * *
    2 * w * w * * * *
    3 * * w * * * * *
    4 * * * * * * * w
    5 * * * * w * b *
    6 * * * * * B * w
    7 * * * * w * w *
  - [ok] you indicated a valid computer move
  - your return value was wrong
 --- end of test case

;; automated_correctness_subtotal_:		65 / 75

;; ===
;; partial credit returned via visual inspection - only for
;; problems on which you earned fewer points than you can get back.
;; if you got more than 0 points, then the partial credit is scaled.
;; look at code for grader notes if bugs identified

;; init_board
+2 Some off-by-one error, where it looks the same but is slightly off


;; only for items incorrect in automated grading
;; manual_correctness_subtotal_:	     +2

;; combined_correctness_subtotal_:	     67 / 75

;; === style ===

;; well-written purposes              3 / 4
Grader comment: -1 it would be better if you added a little bit to explain what
the parameters are in your purposes.

;; proper indentation, line breaks    4 / 4
;; well-named variables		      4 / 4
(i, j, k okay for simple loop counters. Meaningful names for others.)
;; adequate tests                     8 / 8
(for each function, tests that exercise pertinent functionality and error conditions)

;; === efficiency ===
;; good decisions for control structures 5 / 5
 -2 if any inappropriate control structure (if/else where switch should have been)
 -2 if any repeated function calls with same input and same result

;; style _subtotal_:		    24 / 25

;; graded by hansonlu
